/***************************************************************************************
*		Name: Ralph Arvin De Castro
*   Student ID: 0923223
***************************************************************************************/

1.1 Brute force algorithm to count the number of inversions in an array

ALGORITHM InversionCountBF (A[0..n-1])
  //Determines the number of inversions in a given array
  //Input: An array A[0..n-1]
  //Output: Returns an integer representing the number of inverions

  c <- 0
  for i<-0 to n-2 do
    for j<- i + 1 to n-1 do
      if A[i] > A[j]
        c <- c+1


Analysis of the number of exections of its basic operation (comparing)

  = sum(i = 0 to n - 2 of sum(j = i + 1 to n - 1 of 1))
  = sum(i = 0 to n - 2 of [(n-1) - (i+1) + 1] )
  = sum(i = 0 to n - 2 of (n-i-1))
  = (n(n-1))/2
  = (n^2-n)/2
  = Big Theta (n^2)


Efficiency class
  Big theta (n^2)

1.2 MergeSort Algorithm for counting inversions

/**modified mergeSort algorithm from textbook Chapter 5.1, page 172**/

ALGORITHM InversionCountDC (A[0..n-1])
  //Determines the number of inversions in a given array
  //Input: An array A[0..n-1]
  //Output: Returns an integer representing the number of inverions

  if n > 1
    copy A[0..floor(n/2)-1] to B[0..floor(n/2)-1]
    copy A[floor(n/2)..n-1] to C[0..ceiling(n/2)-1]
      invCount <- InversionCountDC(B[0..floor(n/2)-1])
      invCount += InversionCountDC(C[0..ceiling(n/2)-1])
      invCount += InversionMerge(B, C, A)
    return invCount

ALGORITHM InversionMerge(B[0..p-1], C[0..q-1], A[0..p + q 􀀀-1])
  //Merges two sorted arrays into one sorted array
  //Input: Arrays B[0..p − 1] and C[0..q − 1] both sorted
  //Output: Sorted array A[0..p + q − 1] of the elements of B and C

  i <-0; j<-0; k<-0; invCount<-0
  while i < p and j < q do
    if B[i] <= C[j]
      A[k] <- B[i]; i <- i + 1
    else A[k] <- C[j]; j <-j + 1; invCount = invCount + (p 􀀀-i)
    k<-k + 1
  if i = p
    copy C[j..q􀀀-1] to A[k..p + q - 1]
  else copy B[i..p- 1] to A[k..p + q -1]
  return invCount

Analysis of the number of exections of its basic operation (Best case)

C(n) = 2C(n/2) + n/2 for n > 1, C(1) = 0
C(n) = (nlog2n)/2
 =   Big theta (n log n)

Master Theorem
    f(n) = n/2 is in Big theta (n^1)
    a = 2; b = 2; d = 1; b^d = 2; a = b^d
  =   Big theta (n log n)

Efficiency Class
  Big theta (n log n)

1.3
Brute force = 7.323 seconds
Merge = 0.016 seconds

The divide and conquer algorithm has an efficiency class of n log  n and evidently faster empirically.

2.1
ALGORITHM ConvexHullBF(P[0..n-1])
      for i <- 0 to n-1 do
          for j <- 0 to n -1 do
            line <- (P[i],P[j])
            for k <- 0 to n -1 do
              compare P[k] from line
            if line is encompasses all P[k] points at one side
              add P[i] to convex hull points

Algorithm Analysis
= sum(i = 0 to n - 1 of sum(j = 0 to n - 1 of sum(k = 0 to n - 1)))
= big theta (n^3)

Efficiency class

Big theta (n^3)

2.2

/**Algorithm derived from Quicksort Textbook 5.2 and from yorku.ca (QuickHall Algorithm) website**/

ALGORITHM QuickHull(P[0..n-1])
    ConvexHallPoints[]
    A <- LeftMost of (P[0..n-1]); B <- RightMost of (P[0..n-1])
    Add A and B to ConvexHallPoints[]
    left[] <- left side of A to B
    right[] <- right side of A to B
    ConvexHallPoints[] += FindHull(left[], A, B)
    ConvexHallPoints[] += FindHull(right[], B, A)
    return ConvexHallPoints[]

ALGORITHM FindHull(ConvexHallPoints[], A, B)
    ConvexHallPoints[(num)]
    if num = 0
        return
    C <-  farthest point(A, B)
    Add C to ConvexHallPoints[]
    D1[] <- right side of A to C
    D2[] <- right side of C to B
    ConvexHallPoints[] += FindHull(D1[], A, C)
    ConvexHallPoints[] += FindHull(D2[], C, B)
    return  ConvexHallPoints[]

Algorithm analysis:
C(n) = 2C(n/2) + n/2 for n > 1, C(1) = 0
C(n) = (nlog2n)/2
 =   Big theta (n log n)

Master Theorem
    f(n) = n/2 is in Big theta (n^1)
    a = 2; b = 2; d = 1; b^d = 2; a = b^d

  =   Big theta (n log n)

Master Theorem
      f(n) = n/2 is in Big theta (n^1); a = 2; b = 2; d = 1; b^d = 2; a = b^d

Efficiency Class
    Big theta (n log n)

1.3
Brute force = 508.240 seconds
Merge = 0.007 seconds

The divide and conquer algorithm has an efficiency class of n log  n and evidently faster than brute force empirically.
